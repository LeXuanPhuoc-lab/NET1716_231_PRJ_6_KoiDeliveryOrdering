// <auto-generated />
using System;
using KoiDeliveryOrdering.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KoiDeliveryOrdering.Data.Migrations
{
    [DbContext(typeof(KoiDeliveryOrderingDbContext))]
    [Migration("20241009033122_update-database")]
    partial class updatedatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.Animal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Age")
                        .HasColumnType("int")
                        .HasColumnName("age");

                    b.Property<Guid>("AnimalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("animal_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<int>("AnimalTypeId")
                        .HasColumnType("int")
                        .HasColumnName("animal_type_id");

                    b.Property<string>("Breed")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("breed");

                    b.Property<string>("ColorPattern")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("color_pattern");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<decimal?>("EstimatedPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("estimated_price");

                    b.Property<string>("HealthStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("health_status");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("image_url");

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("is_available");

                    b.Property<string>("OriginCountry")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("origin_country");

                    b.Property<decimal?>("Size")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("size");

                    b.HasKey("Id");

                    b.HasIndex("AnimalTypeId");

                    b.HasIndex(new[] { "AnimalId" }, "UQ_Animal_AnimalId")
                        .IsUnique();

                    b.ToTable("Animal", (string)null);
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.AnimalType", b =>
                {
                    b.Property<int>("AnimalTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("animal_type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnimalTypeId"));

                    b.Property<string>("AnimalTypeDesc")
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)")
                        .HasColumnName("animal_type_desc");

                    b.HasKey("AnimalTypeId")
                        .HasName("PK_AnimalType");

                    b.ToTable("Animal_Type", (string)null);
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.CareLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("ActualValue")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("actual_value");

                    b.Property<int>("DailyCareScheduleId")
                        .HasColumnType("int")
                        .HasColumnName("daily_care_schedule_id");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime")
                        .HasColumnName("log_date");

                    b.Property<string>("StaffComments")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("staff_comments");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staff_id");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK_CareLog");

                    b.HasIndex("DailyCareScheduleId");

                    b.HasIndex("StaffId");

                    b.ToTable("Care_Log", (string)null);
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.CareTask", b =>
                {
                    b.Property<int>("CareTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("care_task_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CareTaskId"));

                    b.Property<string>("AssignedTo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("assigned_to");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("completed_at");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime")
                        .HasColumnName("due_date");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("bit")
                        .HasColumnName("is_recurring");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("notes");

                    b.Property<string>("Priority")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("priority");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("task_name");

                    b.Property<string>("Unit")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("unit");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("CareTaskId")
                        .HasName("PK_CareTask");

                    b.ToTable("Care_Task", (string)null);
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.DailyCareSchedule", b =>
                {
                    b.Property<int>("DailyCareScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("daily_care_schedule_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DailyCareScheduleId"));

                    b.Property<int>("CareTaskId")
                        .HasColumnType("int")
                        .HasColumnName("care_task_id");

                    b.Property<string>("CaregiverName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeliverOrderDetailId")
                        .HasColumnType("int")
                        .HasColumnName("deliver_order_detail_id");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsCritical")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastPerformedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("RecommendedValue")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("recommended_value");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.Property<string>("TaskDuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskFrequency")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("task_frequency");

                    b.HasKey("DailyCareScheduleId")
                        .HasName("PK_DailyCareSchedule");

                    b.HasIndex("CareTaskId");

                    b.HasIndex("DeliverOrderDetailId");

                    b.ToTable("Daily_Care_Schedule", (string)null);
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.DeliveryOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("delivery_date");

                    b.Property<Guid>("DeliveryOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("delivery_order_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int")
                        .HasColumnName("document_id");

                    b.Property<bool>("IsInternational")
                        .HasColumnType("bit")
                        .HasColumnName("is_international");

                    b.Property<bool?>("IsPurchased")
                        .HasColumnType("bit")
                        .HasColumnName("is_purchased");

                    b.Property<bool?>("IsSenderPurchase")
                        .HasColumnType("bit")
                        .HasColumnName("is_sender_purchase");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("order_status");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    b.Property<string>("RecipientAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("recipient_address");

                    b.Property<string>("RecipientAppointmentTime")
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)")
                        .HasColumnName("recipient_appointment_time");

                    b.Property<double?>("RecipientLatitude")
                        .HasColumnType("float")
                        .HasColumnName("recipient_latitude");

                    b.Property<double?>("RecipientLongitude")
                        .HasColumnType("float")
                        .HasColumnName("recipient_longitude");

                    b.Property<string>("SenderAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("sender_address");

                    b.Property<double?>("SenderLatitude")
                        .HasColumnType("float")
                        .HasColumnName("sender_latitude");

                    b.Property<double?>("SenderLongitude")
                        .HasColumnType("float")
                        .HasColumnName("sender_longitude");

                    b.Property<int>("ShippingFeeId")
                        .HasColumnType("int")
                        .HasColumnName("shipping_fee_id");

                    b.Property<decimal?>("TaxFee")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("tax_fee");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("total_amount");

                    b.Property<int?>("VoucherPromotionId")
                        .HasColumnType("int")
                        .HasColumnName("voucher_promotion_id");

                    b.HasKey("Id")
                        .HasName("PK_DeliveryOrder");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("ShippingFeeId");

                    b.HasIndex("VoucherPromotionId");

                    b.HasIndex(new[] { "DeliveryOrderId" }, "UQ_DeliveryOrder_OrderId")
                        .IsUnique();

                    b.ToTable("Delivery_Order", (string)null);
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.DeliveryOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimalId")
                        .HasColumnType("int")
                        .HasColumnName("animal_id");

                    b.Property<Guid>("DeliveryOrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("delivery_order_detail_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<int>("DeliveryOrderId")
                        .HasColumnType("int")
                        .HasColumnName("delivery_order_id");

                    b.Property<string>("PostDeliveryHealthStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("post_delivery_health_status");

                    b.Property<string>("PreDeliveryHealthStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("pre_delivery_health_status");

                    b.HasKey("Id")
                        .HasName("PK_OrderDetail");

                    b.HasIndex("AnimalId");

                    b.HasIndex("DeliveryOrderId");

                    b.HasIndex(new[] { "DeliveryOrderDetailId" }, "UQ_OrderDetail_OrderDetailId")
                        .IsUnique();

                    b.ToTable("Delivery_Order_Detail", (string)null);
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AssurranceFee")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("assurrance_fee");

                    b.Property<string>("ConsigneeAddress")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)")
                        .HasColumnName("consignee_address");

                    b.Property<string>("ConsigneeName")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)")
                        .HasColumnName("consignee_name");

                    b.Property<string>("ConsigneePhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("consignee_phone");

                    b.Property<string>("DispatchMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("dispatch_method");

                    b.Property<Guid>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("document_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("DocumentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("document_number");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("document_type");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime")
                        .HasColumnName("expiration_date");

                    b.Property<string>("ExporterAddress")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)")
                        .HasColumnName("exporter_address");

                    b.Property<string>("ExporterName")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)")
                        .HasColumnName("exporter_name");

                    b.Property<string>("ExporterPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("exporter_phone");

                    b.Property<string>("FinalDestination")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)")
                        .HasColumnName("final_destination");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime")
                        .HasColumnName("issue_date");

                    b.Property<string>("PortOfDischarge")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("port_of_discharge");

                    b.Property<string>("PortOfLoading")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("port_of_loading");

                    b.Property<decimal?>("ShippingFee")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("shipping_fee");

                    b.Property<decimal?>("TaxFee")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("tax_fee");

                    b.Property<string>("TransportationNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("transportation_no");

                    b.Property<string>("TransportationType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("transportation_type");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DocumentId" }, "UQ_Document")
                        .IsUnique();

                    b.HasIndex(new[] { "DocumentNumber" }, "UQ__Document__C8FE0D8C5D2DDE9F")
                        .IsUnique()
                        .HasFilter("[document_number] IS NOT NULL");

                    b.ToTable("Document", (string)null);
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.DocumentDetail", b =>
                {
                    b.Property<int>("DocumentDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("document_detail_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentDetailId"));

                    b.Property<string>("DocumentDetailDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("document_detail_description");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int")
                        .HasColumnName("document_id");

                    b.Property<string>("ItemCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("item_category");

                    b.Property<decimal>("ItemEstimatePrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("item_estimate_price");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("item_name");

                    b.Property<int?>("ItemQuantity")
                        .HasColumnType("int")
                        .HasColumnName("item_quantity");

                    b.Property<decimal>("ItemWeight")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("item_weight");

                    b.HasKey("DocumentDetailId")
                        .HasName("PK_DocumentDetail");

                    b.HasIndex("DocumentId");

                    b.ToTable("Document_Detail", (string)null);
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.Garage", b =>
                {
                    b.Property<int>("GarageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("garage_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GarageId"));

                    b.Property<string>("CityProvince")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("city_province");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("district");

                    b.Property<string>("GarageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("garage_name");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float")
                        .HasColumnName("longitude");

                    b.Property<string>("ManagerName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("manager_name");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phone");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)")
                        .HasColumnName("street");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ward");

                    b.HasKey("GarageId");

                    b.ToTable("Garage", (string)null);
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.JobTitle", b =>
                {
                    b.Property<int>("JobTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("job_title_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobTitleId"));

                    b.Property<string>("JobTitleDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("job_title_desc");

                    b.HasKey("JobTitleId")
                        .HasName("PK_JobTitle");

                    b.ToTable("Job_Title", (string)null);
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.OrderAssignment", b =>
                {
                    b.Property<int>("OrderAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_assignment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderAssignmentId"));

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("assigned_date");

                    b.Property<int>("AssignedTruckId")
                        .HasColumnType("int")
                        .HasColumnName("assigned_truck_id");

                    b.Property<int>("DeliveryOrderId")
                        .HasColumnType("int")
                        .HasColumnName("delivery_order_id");

                    b.Property<string>("DeliveryStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("delivery_status");

                    b.Property<int>("DriverId")
                        .HasColumnType("int")
                        .HasColumnName("driver_id");

                    b.Property<int>("FishCarerId")
                        .HasColumnType("int")
                        .HasColumnName("fish_carer_id");

                    b.HasKey("OrderAssignmentId")
                        .HasName("PK_OrderAssignment");

                    b.HasIndex("AssignedTruckId");

                    b.HasIndex("DeliveryOrderId");

                    b.HasIndex("DriverId");

                    b.HasIndex("FishCarerId");

                    b.ToTable("Order_Assignment", (string)null);
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("payment_method");

                    b.HasKey("PaymentId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.SenderInformation", b =>
                {
                    b.Property<int>("SenderInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("sender_information_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SenderInformationId"));

                    b.Property<string>("CityProvince")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("city_province");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("district");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float")
                        .HasColumnName("longitude");

                    b.Property<string>("SenderAppointmentTime")
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)")
                        .HasColumnName("sender_appointment_time");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)")
                        .HasColumnName("sender_name");

                    b.Property<string>("SenderPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("sender_phone");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)")
                        .HasColumnName("street");

                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ward");

                    b.HasKey("SenderInformationId")
                        .HasName("PK_SenderInformation");

                    b.HasIndex("UserId");

                    b.ToTable("Sender_Information", (string)null);
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.ShippingFee", b =>
                {
                    b.Property<int>("ShippingFeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("shipping_fee_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShippingFeeId"));

                    b.Property<decimal>("BaseFee")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("base_fee");

                    b.Property<decimal>("DistanceRangeFrom")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("distance_range_from");

                    b.Property<decimal>("DistanceRangeTo")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("distance_range_to");

                    b.Property<string>("EstimatedTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("estimated_time");

                    b.Property<string>("ServiceCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("service_code");

                    b.Property<int>("WeightClass")
                        .HasColumnType("int")
                        .HasColumnName("weight_class");

                    b.HasKey("ShippingFeeId")
                        .HasName("PK_ShippingFee");

                    b.ToTable("Shipping_Fee", (string)null);
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("AvatarImage")
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("avatar_image");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)")
                        .HasColumnName("full_name");

                    b.Property<string>("IdentityCard")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("identity_card");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<int?>("JobTitleId")
                        .HasColumnType("int")
                        .HasColumnName("job_title_id");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float")
                        .HasColumnName("longitude");

                    b.Property<string>("Password")
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phone");

                    b.Property<Guid>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("staff_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Username")
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("JobTitleId");

                    b.HasIndex(new[] { "StaffId" }, "UQ_Staff_StaffId")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "UQ__Staff__F3DBC572B8970878")
                        .IsUnique()
                        .HasFilter("[username] IS NOT NULL");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.Truck", b =>
                {
                    b.Property<int>("TruckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("truck_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TruckId"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("capacity");

                    b.Property<int>("GarageId")
                        .HasColumnType("int")
                        .HasColumnName("garage_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastMaintenanceDate")
                        .HasColumnType("datetime")
                        .HasColumnName("last_maintenance_date");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("model");

                    b.Property<string>("TruckLicensePlate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("truck_license_plate");

                    b.HasKey("TruckId");

                    b.HasIndex("GarageId");

                    b.ToTable("Truck", (string)null);
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("AvatarImage")
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("avatar_image");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime")
                        .HasColumnName("create_date");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)")
                        .HasColumnName("full_name");

                    b.Property<string>("IdentityCard")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("identity_card");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float")
                        .HasColumnName("longitude");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phone");

                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("(newsequentialid())");

                    b.Property<string>("Username")
                        .HasMaxLength(155)
                        .HasColumnType("nvarchar(155)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "UQ_User_UserId")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "UQ__User__F3DBC572766FAF1D")
                        .IsUnique()
                        .HasFilter("[username] IS NOT NULL");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.VoucherPromotion", b =>
                {
                    b.Property<int>("VoucherPromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("voucher_promotion_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoucherPromotionId"));

                    b.Property<string>("VoucherPromotionCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("voucher_promotion_code");

                    b.HasKey("VoucherPromotionId")
                        .HasName("PK_VoucherPromotion");

                    b.ToTable("Voucher_Promotion", (string)null);
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.Animal", b =>
                {
                    b.HasOne("KoiDeliveryOrdering.Data.Entities.AnimalType", "AnimalType")
                        .WithMany("Animals")
                        .HasForeignKey("AnimalTypeId")
                        .IsRequired()
                        .HasConstraintName("PK_Animal_AnimalType");

                    b.Navigation("AnimalType");
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.CareLog", b =>
                {
                    b.HasOne("KoiDeliveryOrdering.Data.Entities.DailyCareSchedule", "DailyCareSchedule")
                        .WithMany("CareLogs")
                        .HasForeignKey("DailyCareScheduleId")
                        .IsRequired()
                        .HasConstraintName("FK_CareLog_DailyCareSchedule");

                    b.HasOne("KoiDeliveryOrdering.Data.Entities.Staff", "Staff")
                        .WithMany("CareLogs")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("FK_CareLog_Staff");

                    b.Navigation("DailyCareSchedule");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.DailyCareSchedule", b =>
                {
                    b.HasOne("KoiDeliveryOrdering.Data.Entities.CareTask", "CareTask")
                        .WithMany("DailyCareSchedules")
                        .HasForeignKey("CareTaskId")
                        .IsRequired()
                        .HasConstraintName("FK_DailyCareSchedule_CareTask");

                    b.HasOne("KoiDeliveryOrdering.Data.Entities.DeliveryOrderDetail", "DeliverOrderDetail")
                        .WithMany("DailyCareSchedules")
                        .HasForeignKey("DeliverOrderDetailId")
                        .IsRequired()
                        .HasConstraintName("FK_DailyCareSchedule_DeliveryOrderDetail");

                    b.Navigation("CareTask");

                    b.Navigation("DeliverOrderDetail");
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.DeliveryOrder", b =>
                {
                    b.HasOne("KoiDeliveryOrdering.Data.Entities.User", "Customer")
                        .WithMany("DeliveryOrders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_DeliveryOrder_User");

                    b.HasOne("KoiDeliveryOrdering.Data.Entities.Document", "Document")
                        .WithMany("DeliveryOrders")
                        .HasForeignKey("DocumentId")
                        .HasConstraintName("FK_DeliveryOrder_Document");

                    b.HasOne("KoiDeliveryOrdering.Data.Entities.Payment", "Payment")
                        .WithMany("DeliveryOrders")
                        .HasForeignKey("PaymentId")
                        .IsRequired()
                        .HasConstraintName("FK_DeliveryOrder_Payment");

                    b.HasOne("KoiDeliveryOrdering.Data.Entities.ShippingFee", "ShippingFee")
                        .WithMany("DeliveryOrders")
                        .HasForeignKey("ShippingFeeId")
                        .IsRequired()
                        .HasConstraintName("FK_DeliveryOrder_ShippingFee");

                    b.HasOne("KoiDeliveryOrdering.Data.Entities.VoucherPromotion", "VoucherPromotion")
                        .WithMany("DeliveryOrders")
                        .HasForeignKey("VoucherPromotionId")
                        .HasConstraintName("FK_DeliveryOrder_VoucherPromotion");

                    b.Navigation("Customer");

                    b.Navigation("Document");

                    b.Navigation("Payment");

                    b.Navigation("ShippingFee");

                    b.Navigation("VoucherPromotion");
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.DeliveryOrderDetail", b =>
                {
                    b.HasOne("KoiDeliveryOrdering.Data.Entities.Animal", "Animal")
                        .WithMany("DeliveryOrderDetails")
                        .HasForeignKey("AnimalId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetail_Animal");

                    b.HasOne("KoiDeliveryOrdering.Data.Entities.DeliveryOrder", "DeliveryOrder")
                        .WithMany("DeliveryOrderDetails")
                        .HasForeignKey("DeliveryOrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetail_Order");

                    b.Navigation("Animal");

                    b.Navigation("DeliveryOrder");
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.DocumentDetail", b =>
                {
                    b.HasOne("KoiDeliveryOrdering.Data.Entities.Document", "Document")
                        .WithMany("DocumentDetails")
                        .HasForeignKey("DocumentId")
                        .IsRequired()
                        .HasConstraintName("FK_DocumentDetail_Document");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.OrderAssignment", b =>
                {
                    b.HasOne("KoiDeliveryOrdering.Data.Entities.Truck", "AssignedTruck")
                        .WithMany("OrderAssignments")
                        .HasForeignKey("AssignedTruckId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderAssignment_Truck");

                    b.HasOne("KoiDeliveryOrdering.Data.Entities.DeliveryOrder", "DeliveryOrder")
                        .WithMany("OrderAssignments")
                        .HasForeignKey("DeliveryOrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderAssignment_Order");

                    b.HasOne("KoiDeliveryOrdering.Data.Entities.Staff", "Driver")
                        .WithMany("OrderAssignmentDrivers")
                        .HasForeignKey("DriverId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderAssignment_Staff");

                    b.HasOne("KoiDeliveryOrdering.Data.Entities.Staff", "FishCarer")
                        .WithMany("OrderAssignmentFishCarers")
                        .HasForeignKey("FishCarerId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderAssignment_User");

                    b.Navigation("AssignedTruck");

                    b.Navigation("DeliveryOrder");

                    b.Navigation("Driver");

                    b.Navigation("FishCarer");
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.SenderInformation", b =>
                {
                    b.HasOne("KoiDeliveryOrdering.Data.Entities.User", "User")
                        .WithMany("SenderInformations")
                        .HasForeignKey("UserId")
                        .HasPrincipalKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SenderInformation_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.Staff", b =>
                {
                    b.HasOne("KoiDeliveryOrdering.Data.Entities.JobTitle", "JobTitle")
                        .WithMany("Staff")
                        .HasForeignKey("JobTitleId")
                        .HasConstraintName("FK_Staff_JobTitle");

                    b.Navigation("JobTitle");
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.Truck", b =>
                {
                    b.HasOne("KoiDeliveryOrdering.Data.Entities.Garage", "Garage")
                        .WithMany("Trucks")
                        .HasForeignKey("GarageId")
                        .IsRequired()
                        .HasConstraintName("FK_Truck_Garage");

                    b.Navigation("Garage");
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.Animal", b =>
                {
                    b.Navigation("DeliveryOrderDetails");
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.AnimalType", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.CareTask", b =>
                {
                    b.Navigation("DailyCareSchedules");
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.DailyCareSchedule", b =>
                {
                    b.Navigation("CareLogs");
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.DeliveryOrder", b =>
                {
                    b.Navigation("DeliveryOrderDetails");

                    b.Navigation("OrderAssignments");
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.DeliveryOrderDetail", b =>
                {
                    b.Navigation("DailyCareSchedules");
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.Document", b =>
                {
                    b.Navigation("DeliveryOrders");

                    b.Navigation("DocumentDetails");
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.Garage", b =>
                {
                    b.Navigation("Trucks");
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.JobTitle", b =>
                {
                    b.Navigation("Staff");
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.Payment", b =>
                {
                    b.Navigation("DeliveryOrders");
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.ShippingFee", b =>
                {
                    b.Navigation("DeliveryOrders");
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.Staff", b =>
                {
                    b.Navigation("CareLogs");

                    b.Navigation("OrderAssignmentDrivers");

                    b.Navigation("OrderAssignmentFishCarers");
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.Truck", b =>
                {
                    b.Navigation("OrderAssignments");
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.User", b =>
                {
                    b.Navigation("DeliveryOrders");

                    b.Navigation("SenderInformations");
                });

            modelBuilder.Entity("KoiDeliveryOrdering.Data.Entities.VoucherPromotion", b =>
                {
                    b.Navigation("DeliveryOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
